# name: Data Pipeline CI/CD

# on:
#   push:
#     branches: [ main ]

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
      
#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.10'
          
#       - name: Install dependencies
#         run: |
#           pip install -r requirements.txt
          
#       - name: Terraform Apply
#         uses: hashicorp/terraform-github-actions@v2
#         with:
#           tf_actions_version: 1.6.2
#           tf_actions_subcommand: 'apply'
#           working-directory: ./dlq_pipeline/infrastructure
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}




name: Data Pipeline CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  terraform:
    name: Terraform Plan/Apply
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./dlq_pipeline/infrastructure
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.2

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false
        continue-on-error: true

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install linting tools
        run: |
          pip install black flake8 isort

      - name: Run Black
        run: black --check src/ scripts/

      - name: Run Flake8
        run: flake8 src/ scripts/

      - name: Run isort
        run: isort --check-only src/ scripts/

  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [lint]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/dlq-pipeline:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/dlq-pipeline:${{ github.sha }}

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: [terraform, build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster data-pipeline-cluster \
            --service dlq-pipeline-service \
            --force-new-deployment